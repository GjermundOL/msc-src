using Muscade
using StaticArrays
using LinearAlgebra
using MasterTask
using GLMakie
using DelimitedFiles


# cross secitonal area (m¬≤)
cs_area = 0.01 #eksempel
# Young's modulus - Steel
y_mod = 200e9
# mass - Steel (kg/m¬≥)
mass = 7850.
# standard acceleration of gravity
g = 9.81
# Number of nodes in the tower
nNodes = 4
# Width of tower
tWidth = 2.0
# Distance between two vertically connected nodes. Distance between n‚ÇÅ and n‚ÇÉ is nHeight/2. 
nHeight=2.0
# Type of external forces
type = "test"
# Scale of external forces
scale = 1.e2
# Relative standard deviation of external forces
œÉ·µ§ ≥·µâÀ° = 1
# Standard deviation of external forces
œÉ·µ§ = scale*œÉ·µ§ ≥·µâÀ°
# Relative standard deviation of measurements
œÉ‚Çó = 1e-8

const ùï£ = Float64




#println("1")
state, Œ¥L·µ•, V‚Çë‚Çì = ForwardAnalysis(cs_area, y_mod, mass, g, nNodes, tWidth, nHeight, type, scale; displayTower=false, saveTower=false)
#println("2")
V‚Çë‚Çì‚Å±‚Åø  = [E.iele for E in V‚Çë‚Çì]
#println("3")

println("Œ¥L fra framover: ", Œ¥L·µ•)

# Adding measurement error to Œ¥L·µ•
Œ¥L‚Çë·µ£·µ£ = [randn()*œÉ‚Çó + i for i in Œ¥L·µ•]

# absolute deviation of measurements
#œÉ‚Çó = abs.(Œ¥L·µ•-Œ¥L‚Çë·µ£·µ£)

# Œ≤ = 1/Œ± 
Œ≤ = œÉ·µ§^2 /œÉ‚Çó^2

# Measuring every other element
V‚Çë‚Çò = V‚Çë‚Çì‚Å±‚Åø[1:2:length(V‚Çë‚Çì‚Å±‚Åø)]
Œ¥L‚Çò = Œ¥L‚Çë·µ£·µ£[1:2:length(Œ¥L‚Çë·µ£·µ£)]
#Œ≤  = Œ≤·µó·µâ·µê·µñ[1:2:length(Œ≤·µó·µâ·µê·µñ)]

# Measuring every element
#V‚Çë‚Çò = V‚Çë‚Çì‚Å±‚Åø
#Œ¥L‚Çò = Œ¥L‚Çë·µ£·µ£
#Œ≤  = Œ≤·µó·µâ·µê·µñ

#println("4")
stateXUA = InverseAnalysis(cs_area, y_mod, mass, g, nNodes, tWidth, nHeight, Œ¥L‚Çò, V‚Çë‚Çò, Œ≤; displayTower=false, saveTower=false)
#println("5")

println("Ferdig")